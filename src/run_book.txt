jfrog rt search --spec=/tmp/jfrogfilespec.json --sort-by created --sort-order=desc --limit 1

{ "files": [ { "aql": { "items.find": { "repo":{"$eq":"my-release-repo"}, "name":{"$match":"my-artifact-prefix*"} } } } ] }

set JFROG_CLI_LOG_LEVEL=DEBUG

curl --insecure --tlsv1.1 -i https://www.allegiantair.com/ --noproxy "*"

curl --insecure --tlsv1.2 -i https://www.allegiantair.com/ --noproxy "*"

Consider the widely accepted DevOps concept of Pets vs. Cattle. In a traditional data center, servers are treated
as Pets
: a physical machine, given a meaningful name, and cared for. You scale by adding more resources to the
same machine (scaling up). If the server becomes sick, you nurse it back to health. Should the server become
unavailable, everyone notices.
The
Cattle
 service model is different. You provision each instance as a virtual machine or container. They're
identical and assigned a system identifier such as Service-01, Service-02, and so on. You scale by creating more
of them (scaling out). When one becomes unavailable, nobody notices.
The cattle model embraces
immutable infrastructure
. Servers aren't repaired or modified. If one fails or requires
updating, it's destroyed and a new one is provisioned â€“ all done via automation.
Cloud-native systems embrace the Cattle service model. They continue to run as the infrastructure scales in or
out with no regard to the machines upon which they're running.
The Azure cloud platform supports this type of highly elastic infrastructure with automatic scaling, self-healing,
and monitoring capabilities.

It's a new way to think about building large, complex systems, an approach that takes full advantage of modern software development
practices, technologies, and cloud infrastructure. The approach changes the way you design, implement, deploy,
and operationalize systems.

Cloud-native technologies empower organizations to build and run scalable applications in modern,
dynamic environments such as public, private, and hybrid clouds. Containers, service meshes, microservices,
immutable infrastructure, and declarative APIs exemplify this approach.

These techniques enable loosely coupled systems that are resilient, manageable, and observable. Combined
with robust automation, they allow engineers to make high-impact changes frequently and predictably with
minimal toil.

Unlike the continuous hype that drives our industry, cloud native is
for-real
. Consider the Cloud Native
Computing Foundation (CNCF), a consortium of over 300 major corporations with a charter to make cloud-
native computing ubiquitous across technology and cloud stacks. As one of the most influential open-source
groups, it hosts many of the fastest-growing open source-projects in GitHub. They include projects such as
Kubernetes, Prometheus, Helm, Envoy, and gRPC.
The CNCF fosters an ecosystem of open-source and vendor-neutrality. Following that lead, this book presents
cloud-native principles, patterns, and best practices that are technology agnostic. At the same time, we discuss
the services and infrastructure available in the Microsoft Azure cloud for constructing cloud-native systems.

result = {
  'a': lambda x: x * 5,
  'b': lambda x: x + 7,
  'c': lambda x: x - 2
}.get(whatToUse, lambda x: x - 22)(value)
